{
    "django__django-11299": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-11299",
        "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b99f03cd88..bbf8ffcd27 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1322,6 +1322,8 @@ class Query(BaseExpression):\n         self.demote_joins(existing_inner)\n \n     def build_where(self, q_object):\n+        # Ensure proper handling of simple_col to avoid fully qualified names\n+        return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]\n         return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]\n \n     def _add_q(self, q_object, used_aliases, branch_negated=False,\ndiff --git a/migrations/0001_initial.py b/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..22a1ecbace\n--- /dev/null\n+++ b/migrations/0001_initial.py\n@@ -0,0 +1,26 @@\n+# Generated by Django 3.0.dev20190430084830 on 2025-04-05 21:02\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    initial = True\n+\n+    dependencies = [\n+    ]\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='TestConstraint',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('field_1', models.IntegerField(blank=True, null=True)),\n+                ('flag', models.BooleanField()),\n+            ],\n+        ),\n+        migrations.AddConstraint(\n+            model_name='testconstraint',\n+            constraint=models.CheckConstraint(check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'), name='field_1_has_value_if_flag_set'),\n+        ),\n+    ]\ndiff --git a/migrations/__init__.py b/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..599c38d938\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,56 @@\n+import django\n+\n+django.setup()\n+\n+from django.db import models\n+\n+class TestConstraint(models.Model):\n+    field_1 = models.IntegerField(blank=True, null=True)\n+    flag = models.BooleanField(blank=False, null=False)\n+\n+    class Meta:\n+        constraints = [\n+            models.CheckConstraint(\n+                check=models.Q(flag__exact=True, field_1__isnull=False) |\n+                      models.Q(flag__exact=False),\n+                name='field_1_has_value_if_flag_set',\n+            ),\n+        ]\n+from django.db import migrations\n+\n+class Migration(migrations.Migration):\n+    dependencies = []\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='TestConstraint',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('field_1', models.IntegerField(blank=True, null=True)),\n+                ('flag', models.BooleanField()),\n+            ],\n+        ),\n+        migrations.AddConstraint(\n+            model_name='testconstraint',\n+            constraint=models.CheckConstraint(\n+                check=models.Q(models.Q(('field_1__isnull', False), ('flag__exact', True)), ('flag__exact', False), _connector='OR'),\n+                name='field_1_has_value_if_flag_set',\n+            ),\n+        ),\n+    ]\n+from django.db import connection\n+\n+for query in connection.queries:\n+    print(query)\n+from django.core.management import call_command\n+\n+call_command('makemigrations', '__main__')\n+call_command('migrate')\n+import django\n+\n+from django.db.backends.signals import connection_created\n+\n+def enable_query_logging(sender, connection, **kwargs):\n+    connection.force_debug_cursor = True\n+\n+connection_created.connect(enable_query_logging)\n\\ No newline at end of file\ndiff --git a/settings.py b/settings.py\nnew file mode 100644\nindex 0000000000..1a5b2725e6\n--- /dev/null\n+++ b/settings.py\n@@ -0,0 +1,16 @@\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    '__main__',\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n+SECRET_KEY = 'dummy_secret_key'\n\\ No newline at end of file\n"
    },
    "django__django-15916": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-15916",
        "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..6807e63fbb 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,8 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    if not formfield_callback and hasattr(form.Meta, 'formfield_callback'):\n+        formfield_callback = form.Meta.formfield_callback\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n"
    },
    "pydata__xarray-3993": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "pydata__xarray-3993",
        "model_patch": ""
    },
    "django__django-15277": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-15277",
        "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n"
    },
    "django__django-15252": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-15252",
        "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..9d88af60ad 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -58,6 +58,20 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this database\n+        if not self.connection.settings_dict.get('NAME') == 'default':\n+            return\n+        # If the table's there, that's fine - we've never changed its schema\n+        # in the codebase.\n+        if self.has_table():\n+            return\n+        # Make the table\n+        try:\n+            with self.connection.schema_editor() as editor:\n+                editor.create_model(self.Migration)\n+        except DatabaseError as exc:\n+            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n"
    },
    "scikit-learn__scikit-learn-11578": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "scikit-learn__scikit-learn-11578",
        "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex e4ea696ce..faefd80a0 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -922,7 +922,7 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         check_input=False, max_squared_sum=max_squared_sum,\n         sample_weight=sample_weight)\n \n-    log_reg = LogisticRegression(fit_intercept=fit_intercept)\n+    log_reg = LogisticRegression(fit_intercept=fit_intercept, multi_class=multi_class)\n \n     # The score method of Logistic Regression has a classes_ attribute.\n     if multi_class == 'ovr':\n"
    },
    "django__django-14534": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-14534",
        "model_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..c93959b1e3 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs']['id']\n \n     @property\n     def choice_label(self):\n"
    },
    "django__django-15563": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-15563",
        "model_patch": "diff --git a/db.sqlite3 b/db.sqlite3\nnew file mode 100644\nindex 0000000000..d3da5a7a38\nBinary files /dev/null and b/db.sqlite3 differ\ndiff --git a/myapp/__init__.py b/myapp/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/myapp/apps.py b/myapp/apps.py\nnew file mode 100644\nindex 0000000000..6e93a3b84e\n--- /dev/null\n+++ b/myapp/apps.py\n@@ -0,0 +1,6 @@\n+\n+from django.apps import AppConfig\n+\n+class MyAppConfig(AppConfig):\n+    default_auto_field = 'django.db.models.AutoField'\n+    name = 'myapp'\n\\ No newline at end of file\ndiff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..76b8a06c62\n--- /dev/null\n+++ b/myapp/migrations/0001_initial.py\n@@ -0,0 +1,54 @@\n+# Generated by Django 4.1.dev20220407050559 on 2025-04-06 00:01\n+\n+from django.db import migrations, models\n+import django.db.models.deletion\n+\n+\n+class Migration(migrations.Migration):\n+\n+    initial = True\n+\n+    dependencies = []\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name=\"Base\",\n+            fields=[\n+                (\"base_id\", models.AutoField(primary_key=True, serialize=False)),\n+                (\"field_base\", models.IntegerField()),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            name=\"OtherBase\",\n+            fields=[\n+                (\"otherbase_id\", models.AutoField(primary_key=True, serialize=False)),\n+                (\"field_otherbase\", models.IntegerField()),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            name=\"Child\",\n+            fields=[\n+                (\n+                    \"otherbase_ptr\",\n+                    models.OneToOneField(\n+                        auto_created=True,\n+                        on_delete=django.db.models.deletion.CASCADE,\n+                        parent_link=True,\n+                        to=\"myapp.otherbase\",\n+                    ),\n+                ),\n+                (\n+                    \"base_ptr\",\n+                    models.OneToOneField(\n+                        auto_created=True,\n+                        on_delete=django.db.models.deletion.CASCADE,\n+                        parent_link=True,\n+                        primary_key=True,\n+                        serialize=False,\n+                        to=\"myapp.base\",\n+                    ),\n+                ),\n+            ],\n+            bases=(\"myapp.base\", \"myapp.otherbase\"),\n+        ),\n+    ]\ndiff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/myapp/models.py b/myapp/models.py\nnew file mode 100644\nindex 0000000000..d2965ef7b1\n--- /dev/null\n+++ b/myapp/models.py\n@@ -0,0 +1,13 @@\n+\n+from django.db import models\n+\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n\\ No newline at end of file\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..3179d1ee62\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,18 @@\n+\n+import os\n+import django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n+django.setup()\n+\n+from myapp.models import Base, OtherBase, Child\n+\n+# Reproduction script\n+from django.db import connection\n+\n+OtherBase.objects.create(field_otherbase=100)\n+OtherBase.objects.create(field_otherbase=101)\n+Child.objects.create(field_base=0, field_otherbase=0)\n+Child.objects.create(field_base=1, field_otherbase=1)\n+Child.objects.update(field_otherbase=55)\n+print(Child.objects.values('field_otherbase'))\n+print(OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'))\n\\ No newline at end of file\ndiff --git a/settings.py b/settings.py\nnew file mode 100644\nindex 0000000000..702a9f473e\n--- /dev/null\n+++ b/settings.py\n@@ -0,0 +1,21 @@\n+\n+import os\n+\n+BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n+\n+SECRET_KEY = 'test-secret-key'\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'myapp',\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n+    }\n+}\n+\n+DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n\\ No newline at end of file\n"
    },
    "sympy__sympy-22914": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "sympy__sympy-22914",
        "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 3a72ab606c..bc55e82fac 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -423,6 +423,11 @@ def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):\n \n \n class PythonCodePrinter(AbstractPythonCodePrinter):\n+    def _print_Min(self, expr):\n+        return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+    def _print_Max(self, expr):\n+        return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n \n     def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n"
    },
    "matplotlib__matplotlib-13989": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "matplotlib__matplotlib-13989",
        "model_patch": "diff --git a/reproduce_hist_bug.py b/reproduce_hist_bug.py\nnew file mode 100644\nindex 0000000000..d2cf80e3c9\n--- /dev/null\n+++ b/reproduce_hist_bug.py\n@@ -0,0 +1,6 @@\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+_, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+print(bins)\n\\ No newline at end of file\n"
    },
    "django__django-13837": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-13837",
        "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f881..c147523bfe 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -223,7 +223,9 @@ def get_child_arguments():\n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n     if py_script == django_main_path:\n         # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+        import __main__\n+        if __main__.__spec__ and __main__.__spec__.parent:\n+            args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n@@ -240,6 +242,9 @@ def get_child_arguments():\n             # TODO: Remove str() when dropping support for PY37.\n             # args parameter accepts path-like on Windows from Python 3.8.\n             return [*args, str(script_entrypoint), *sys.argv[1:]]\n+        if py_script == '-m':\n+            args += ['-m', __main__.__spec__.parent]\n+            return args\n         raise RuntimeError('Script %s does not exist.' % py_script)\n     else:\n         args += sys.argv\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..0d7cebcd84\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,8 @@\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+INSTALLED_APPS = []\n\\ No newline at end of file\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b9f2db7276..6124b1c192 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -766,3 +766,12 @@ class StatReloaderTests(ReloaderTests, IntegrationTests):\n             snapshot = list(self.reloader.snapshot_files())\n             self.assertEqual(len(snapshot), 1)\n             self.assertEqual(snapshot[0][0], self.existing_file)\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_detects_package_other_than_django(self):\n+        import __main__\n+        __main__.__spec__ = mock.Mock()\n+        __main__.__spec__.parent = 'pkg_other_than_django'\n+        args = autoreload.get_child_arguments()\n+        self.assertIn('-m', args)\n+        self.assertIn('pkg_other_than_django', args)\n\\ No newline at end of file\n"
    },
    "scikit-learn__scikit-learn-14053": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "scikit-learn__scikit-learn-14053",
        "model_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 1fe11e596..09c81eec4 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,7 +890,7 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] if 0 <= i < len(feature_names) else \"undefined_feature\" for i in tree_.feature]\n     else:\n         feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n \n"
    },
    "sphinx-doc__sphinx-8269": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "sphinx-doc__sphinx-8269",
        "model_patch": "diff --git a/Makefile b/Makefile\nindex 9cff012d4..bbfb41d9d 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -76,7 +76,19 @@ covertest:\n build:\n \t@$(PYTHON) setup.py build\n \n-.PHONY: docs\n+.PHONY: docs linkcheck\n+linkcheck:\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+$(MAKE) -C doc linkcheck\n+\n docs:\n ifndef target\n \t$(info You need to provide a target variable, e.g. `make docs target=html`.)\ndiff --git a/make.bat b/make.bat\nnew file mode 100644\nindex 000000000..6247f7e23\n--- /dev/null\n+++ b/make.bat\n@@ -0,0 +1,35 @@\n+@ECHO OFF\n+\n+pushd %~dp0\n+\n+REM Command file for Sphinx documentation\n+\n+if \"%SPHINXBUILD%\" == \"\" (\n+\tset SPHINXBUILD=sphinx-build\n+)\n+set SOURCEDIR=source\n+set BUILDDIR=build\n+\n+if \"%1\" == \"\" goto help\n+\n+%SPHINXBUILD% >NUL 2>NUL\n+if errorlevel 9009 (\n+\techo.\n+\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx\n+\techo.installed, then set the SPHINXBUILD environment variable to point\n+\techo.to the full path of the 'sphinx-build' executable. Alternatively you\n+\techo.may add the Sphinx directory to PATH.\n+\techo.\n+\techo.If you don't have Sphinx installed, grab it from\n+\techo.http://sphinx-doc.org/\n+\texit /b 1\n+)\n+\n+%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\n+goto end\n+\n+:help\n+%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\n+\n+:end\n+popd\ndiff --git a/source/conf.py b/source/conf.py\nnew file mode 100644\nindex 000000000..67159ca17\n--- /dev/null\n+++ b/source/conf.py\n@@ -0,0 +1,63 @@\n+# Configuration file for the Sphinx documentation builder.\n+#\n+# This file only contains a selection of the most common options. For a full\n+# list see the documentation:\n+# https://www.sphinx-doc.org/en/master/usage/configuration.html\n+\n+# -- Path setup --------------------------------------------------------------\n+\n+# If extensions (or modules to document with autodoc) are in another directory,\n+# add these directories to sys.path here. If the directory is relative to the\n+# documentation root, use os.path.abspath to make it absolute, like shown here.\n+#\n+# import os\n+# import sys\n+# sys.path.insert(0, os.path.abspath('.'))\n+\n+\n+# -- Project information -----------------------------------------------------\n+\n+project = 'proj'\n+copyright = '2025, me'\n+author = 'me'\n+\n+# The full version, including alpha/beta/rc tags\n+release = '1.0'\n+\n+\n+# -- General configuration ---------------------------------------------------\n+\n+# Add any Sphinx extension module names here, as strings. They can be\n+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n+# ones.\n+extensions = [\n+    'sphinx.builders.linkcheck',\n+]\n+\n+# Add any paths that contain templates here, relative to this directory.\n+templates_path = ['_templates']\n+\n+# The language for content autogenerated by Sphinx. Refer to documentation\n+# for a list of supported languages.\n+#\n+# This is also used if you do content translation via gettext catalogs.\n+# Usually you set \"language\" from the command line for these cases.\n+language = 'en'\n+\n+# List of patterns, relative to source directory, that match files and\n+# directories to ignore when looking for source files.\n+# This pattern also affects html_static_path and html_extra_path.\n+exclude_patterns = []\n+\n+\n+# -- Options for HTML output -------------------------------------------------\n+\n+# The theme to use for HTML and HTML Help pages.  See the documentation for\n+# a list of builtin themes.\n+#\n+html_theme = 'alabaster'\n+\n+# Add any paths that contain custom static files (such as style sheets) here,\n+# relative to this directory. They are copied after the builtin static files,\n+# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n+html_static_path = ['_static']\n\\ No newline at end of file\ndiff --git a/source/index.rst b/source/index.rst\nnew file mode 100644\nindex 000000000..e344beb99\n--- /dev/null\n+++ b/source/index.rst\n@@ -0,0 +1,22 @@\n+.. proj documentation master file, created by\n+   sphinx-quickstart on Sun Apr  6 05:40:11 2025.\n+   You can adapt this file completely to your liking, but it should at least\n+   contain the root `toctree` directive.\n+\n+Welcome to proj's documentation!\n+================================\n+\n+.. toctree::\n+   :maxdepth: 2\n+   :caption: Contents:\n+\n+\n+\n+Indices and tables\n+==================\n+\n+* :ref:`genindex`\n+* :ref:`modindex`\n+* :ref:`search`\n+\n+`foo <https://google.com/test.txt#test>`_\n\\ No newline at end of file\n"
    },
    "django__django-11433": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-11433",
        "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..5eb43b7f6d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -46,11 +46,12 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         if exclude and f.name in exclude:\n             continue\n-        # Leave defaults for fields that aren't in POST data, except for\n-        # checkbox inputs because they don't appear in POST data if not checked.\n+        # Allow cleaned_data to overwrite default values explicitly.\n         if (f.has_default() and\n                 form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n-            continue\n+            if f.name not in cleaned_data:\n+                cleaned_data[f.name] = f.get_default()\n+\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 3893eb334c..9220573f1e 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2916,3 +2916,14 @@ class ModelToDictTests(TestCase):\n         # If data were a QuerySet, it would be reevaluated here and give \"red\"\n         # instead of the original value.\n         self.assertEqual(data, [blue])\n+    def test_cleaned_data_overwrites_default(self):\n+        class DefaultFieldModelForm(forms.ModelForm):\n+            class Meta:\n+                model = PublicationDefaults\n+                fields = ['title']\n+\n+        instance = PublicationDefaults.objects.create(title=\"Default Title\")\n+        form = DefaultFieldModelForm(data={}, instance=instance)\n+        form.cleaned_data = {'title': 'Overwritten Title'}\n+        instance = form.save()\n+        self.assertEqual(instance.title, 'Overwritten Title')\n\\ No newline at end of file\n"
    },
    "matplotlib__matplotlib-24637": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "matplotlib__matplotlib-24637",
        "model_patch": "diff --git a/example.svg b/example.svg\nnew file mode 100644\nindex 0000000000..e01083cd3a\nBinary files /dev/null and b/example.svg differ\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..cd4b86102e 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1203,7 +1203,9 @@ class OffsetImage(OffsetBox):\n \n     def draw(self, renderer):\n         # docstring inherited\n+        renderer.open_group(self.get_gid())\n         self.image.draw(renderer)\n+        renderer.close_group(self.get_gid())\n         # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))\n         self.stale = False\n \ndiff --git a/reproduce_annotation_bbox.py b/reproduce_annotation_bbox.py\nnew file mode 100644\nindex 0000000000..7391bca1b2\n--- /dev/null\n+++ b/reproduce_annotation_bbox.py\n@@ -0,0 +1,29 @@\n+\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+fig, ax = plt.subplots()\n+\n+# Replace with a placeholder image path\n+arr_img = plt.imread(\"undraw_flowers_vx06.png\")\n+\n+xy = [0.3, 0.55]\n+\n+imagebox = OffsetImage(arr_img, zoom=0.1)\n+imagebox.image.axes = ax\n+\n+ab = AnnotationBbox(imagebox, xy,\n+                    xybox=(120., -80.),\n+                    xycoords='data',\n+                    boxcoords=\"offset points\",\n+                    pad=0.5,\n+                    arrowprops=dict(\n+                        arrowstyle=\"->\",\n+                        connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                    )\n+ab.set_gid('My_label')\n+ax.add_artist(ab)\n+\n+print(f\"GID = {ab.get_gid()}\")\n+\n+fig.savefig(\"example.svg\", format=\"svg\")\n\\ No newline at end of file\ndiff --git a/undraw_flowers_vx06.png b/undraw_flowers_vx06.png\nnew file mode 100644\nindex 0000000000..a5435f278b\nBinary files /dev/null and b/undraw_flowers_vx06.png differ\n"
    },
    "psf__requests-1142": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "psf__requests-1142",
        "model_patch": "diff --git a/reproduce_requests_bug.py b/reproduce_requests_bug.py\nnew file mode 100644\nindex 00000000..2fb5cd82\n--- /dev/null\n+++ b/reproduce_requests_bug.py\n@@ -0,0 +1,6 @@\n+\n+import requests\n+\n+url = \"http://example.com\"\n+response = requests.get(url)\n+print(\"Headers sent:\", response.request.headers)\n\\ No newline at end of file\ndiff --git a/requests/models.py b/requests/models.py\nindex 99260453..740b1b29 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -359,7 +359,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n \n             if length:\n-                self.headers['Content-Length'] = length\n+                if self.method.upper() != 'GET':\n+                    self.headers['Content-Length'] = length\n             else:\n                 self.headers['Transfer-Encoding'] = 'chunked'\n         # Check if file, fo, generator, iterator.\ndiff --git a/verify_requests_fix.py b/verify_requests_fix.py\nnew file mode 100644\nindex 00000000..b7764fab\n--- /dev/null\n+++ b/verify_requests_fix.py\n@@ -0,0 +1,11 @@\n+\n+import requests\n+\n+url = \"http://example.com\"\n+response = requests.get(url)\n+headers = response.request.headers\n+\n+if 'Content-Length' in headers:\n+    print(\"Bug persists: 'Content-Length' header is present.\")\n+else:\n+    print(\"Bug fixed: 'Content-Length' header is absent.\")\n\\ No newline at end of file\n"
    },
    "django__django-13964": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-13964",
        "model_patch": "diff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..69d7023c30\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,31 @@\n+\n+from django.db import models, transaction\n+from django.conf import settings\n+\n+settings.configure(\n+    \n+    \n+    \n+    INSTALLED_APPS=[\"testbed\"],\n+    DATABASES={\n+        \"default\": {\n+            \"ENGINE\": \"django.db.backends.sqlite3\",\n+            \"NAME\": \"test.db\",\n+        }\n+    },\n+)\n+\n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n+with transaction.atomic():\n+    order = Order()\n+    order.product = Product()\n+    order.product.sku = \"foo\"\n+    order.product.save()\n+    order.save()\n+    print(Order.objects.filter(product_id=\"\").exists())  # Should not succeed\n+    print(Order.objects.filter(product=order.product).exists())  # Should succeed\n\\ No newline at end of file\n"
    },
    "sphinx-doc__sphinx-7889": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "sphinx-doc__sphinx-7889",
        "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a96..1cc8b01f2 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -70,7 +70,7 @@ class _MockObject:\n \n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n-    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    attrs = {'__module__': module, '__display_name__': str(module) + '.' + name}\n     attrs.update(attributes or {})\n \n     return type(name, (superclass,), attrs)\n"
    },
    "scikit-learn__scikit-learn-13328": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "scikit-learn__scikit-learn-13328",
        "model_patch": "diff --git a/reproduce_huber.py b/reproduce_huber.py\nnew file mode 100644\nindex 000000000..263c6e6db\n--- /dev/null\n+++ b/reproduce_huber.py\n@@ -0,0 +1,16 @@\n+\n+import numpy as np\n+from sklearn.datasets import make_regression\n+from sklearn.linear_model import HuberRegressor\n+\n+# Random data\n+X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\n+X_bool = X > 0\n+X_bool_as_float = np.asarray(X_bool, dtype=float)\n+\n+# Works\n+huber = HuberRegressor().fit(X, y)\n+# Fails (!)\n+huber = HuberRegressor().fit(X_bool, y)\n+# Also works\n+huber = HuberRegressor().fit(X_bool_as_float, y)\n\\ No newline at end of file\ndiff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 65c686400..ed50fda09 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -250,7 +250,12 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         -------\n         self : object\n         \"\"\"\n+        X = X.astype(float) if X.dtype == bool else X\n+        X = X.astype(float) if X.dtype == bool else X\n         X, y = check_X_y(\n+            X.astype(float) if X.dtype == bool else X,\n+            X.astype(float) if X.dtype == bool else X,\n+            X.astype(float) if X.dtype == bool else X,\n             X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n"
    },
    "pydata__xarray-6992": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "pydata__xarray-6992",
        "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 620f32f8..1c0e0435 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,7 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return max(0, len(self._dataset._variables) - len(self._dataset._coord_names))\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n"
    },
    "pylint-dev__pylint-4604": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "pylint-dev__pylint-4604",
        "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..b3e1ccf74 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -56,6 +56,7 @@ import re\n from functools import lru_cache\n \n import astroid\n+from astroid.rebuilder import check_type_comment\n \n from pylint.checkers import BaseChecker, utils\n from pylint.checkers.utils import is_postponed_evaluation_enabled\n@@ -1684,6 +1685,8 @@ class VariablesChecker(BaseChecker):\n                         msg = f\"{qname} imported as {asname}\"\n                     else:\n                         msg = \"import %s\" % name\n+                    if stmt.type_annotation_refs() or stmt.type_comment_args or stmt.type_comment_returns:\n+                        return\n                     self.add_message(\"unused-import\", args=msg, node=stmt)\n                     return\n                 if isinstance(stmt, astroid.ImportFrom):\n@@ -1843,6 +1846,12 @@ class VariablesChecker(BaseChecker):\n         )\n \n     def _store_type_annotation_names(self, node):\n+        # Extend to handle type comments\n+        if node.type_comment_args:\n+            for argument_annotation in node.type_comment_args:\n+                self._store_type_annotation_node(argument_annotation)\n+        if node.type_comment_returns:\n+            self._store_type_annotation_node(node.type_comment_returns)\n         type_annotation = node.type_annotation\n         if not type_annotation:\n             return\ndiff --git a/reproduce_unused_import.py b/reproduce_unused_import.py\nnew file mode 100644\nindex 000000000..c7717c787\n--- /dev/null\n+++ b/reproduce_unused_import.py\n@@ -0,0 +1,8 @@\n+\n+\"\"\"Docstring.\"\"\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n\\ No newline at end of file\n"
    },
    "astropy__astropy-14539": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "astropy__astropy-14539",
        "model_patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..d1d88213a1 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1460,7 +1460,13 @@ class TableDataDiff(_BaseDiff):\n                     ],\n                 )\n             else:\n-                diffs = np.where(arra != arrb)\n+                diffs = (\n+                    [\n+                        idx\n+                        for idx in range(len(arra))\n+                        if not np.array_equal(arra[idx], arrb[idx])\n+                    ],\n+                )\n \n             self.diff_total += len(set(diffs[0]))\n \ndiff --git a/diffbug.fits b/diffbug.fits\nnew file mode 100644\nindex 0000000000..fb6df78b71\nBinary files /dev/null and b/diffbug.fits differ\n"
    },
    "pydata__xarray-3677": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "pydata__xarray-3677",
        "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 10c7804d..6bfa89a8 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -814,6 +814,11 @@ def dataset_merge_method(\n     else:\n         overwrite_vars = {overwrite_vars}\n \n+    from .dataarray import DataArray\n+\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n+\n     if not overwrite_vars:\n         objs = [dataset, other]\n         priority_arg = None\n"
    },
    "django__django-11292": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-11292",
        "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 0c3a981290..576adb916d 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -278,6 +278,7 @@ class BaseCommand:\n             help='A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\".',\n         )\n         parser.add_argument('--traceback', action='store_true', help='Raise on CommandError exceptions')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n         parser.add_argument(\n             '--no-color', action='store_true',\n             help=\"Don't colorize the command output.\",\n"
    },
    "django__django-11734": {
        "model_name_or_path": "4o_baseline",
        "instance_id": "django__django-11734",
        "model_patch": ""
    }
}